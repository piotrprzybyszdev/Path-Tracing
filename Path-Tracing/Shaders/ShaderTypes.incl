#ifndef GL_core_profile
#pragma once

#include <glm/glm.hpp>

namespace PathTracing::Shaders
{

using namespace glm;

using RenderModeFlags       = uint;
using EnabledTextureFlags   = uint;
using RaygenFlags           = uint;
using MissFlags             = uint;
using ClosestHitFlags       = uint;

#endif


const uint DefaultColorTextureIndex         = 0;
const uint DefaultNormalTextureIndex        = 1;
const uint DefaultRoughnessTextureIndex     = 2;
const uint DefaultMetalicTextureIndex       = 3;
const uint SceneTextureOffset               = 4;

const uint RenderModeColor                  = 1;
const uint RenderModeWorldPosition          = 2;
const uint RenderModeNormal	                = 3;
const uint RenderModeTextureCoords          = 4;
const uint RenderModeMips                   = 5;

const uint TexturesEnableNone               = 0x0u;
const uint TexturesEnableColor              = 0x1u;
const uint TexturesEnableNormal             = 0x2u;
const uint TexturesEnableMetalic            = 0x4u;
const uint TexturesEnableRoughness          = 0x8u;
const uint TexturesEnableAll                = 0xfu;

const uint RaygenFlagsNone                  = 0x0u;
const uint RaygenFlagsForceOpaque           = 0x1u;
const uint RaygenFlagsCullBackFaces         = 0x2u;
const uint RaygenFlagsAll                   = 0x3u;

const uint MissFlagsNone                    = 0x0u;
const uint MissFlagsSkybox2D                = 0x1u;
const uint MissFlagsSkyboxCube              = 0x2u;
const uint MissFlagsAll                     = 0x3u;

const uint ClosestHitFlagsNone              = 0x0u;
const uint ClosestHitFlagsDisableMipMaps    = 0x1u;
const uint ClosestHitFlagsAll               = 0x1u;

struct Camera
{
    mat4 ViewInverse;
    mat4 ProjInverse;
};

struct Vertex
{
    vec3 Position;
    vec2 TexCoords;
    vec3 Normal;
    vec3 Tangent;
    vec3 Bitangent;
};

struct Material
{
	uint ColorIdx;
    uint NormalIdx;
    uint RoughnessIdx;
    uint MetalicIdx;
};

struct Light
{
    vec3 Color;
    float pad0;
    vec3 Position;
    float pad1;
};


#ifndef GL_core_profile

inline uint GetSceneTextureIndex(uint textureIndex)
{
    return SceneTextureOffset + textureIndex;
}

}
#endif
