#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_buffer_reference : require

#include "ShaderRendererTypes.incl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT u_TopLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D u_Image;
layout(binding = 2, set = 0) uniform MainBlock {
	RaygenUniformData mainUniform;
};

layout(location = 0) rayPayloadEXT vec3 hitValue;

void main()
{
	const Camera camera = mainUniform.u_Camera;

	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
	vec2 d = inUV * 2.0 - 1.0;

	vec4 origin = camera.ViewInverse * vec4(0, 0, 0, 1);
	vec4 target = camera.ProjInverse * vec4(d.x, d.y, 1, 1);
	vec4 direction = camera.ViewInverse * vec4(normalize(target.xyz), 0);

	float tmin = 0.001;
	float tmax = 10000.0;

	// TODO: Read SBT config from uniform buffer
	uint flags = gl_RayFlagsNoneEXT;
	if ((mainUniform.u_Flags & RaygenFlagsForceOpaque) != RaygenFlagsNone)
		flags |= gl_RayFlagsOpaqueEXT;
	if ((mainUniform.u_Flags & RaygenFlagsCullBackFaces) != RaygenFlagsNone)
		flags |= gl_RayFlagsCullBackFacingTrianglesEXT;

	traceRayEXT(u_TopLevelAS, flags, 0xff, 0, 1, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
	
	imageStore(u_Image, ivec2(gl_LaunchIDEXT.xy), vec4(hitValue * mainUniform.u_Exposure, 0.0f));
}
